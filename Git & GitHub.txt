Section 6: Introducing Version Control with Git & GitHub
96. What are Git & GitHub? [Day 11]
The version control/version management. 
- this concept is all about efficient control & tracking of code changes* over time (little asterisk is added and it is simply due to the fact that although we have a web dev course here, the version management tools we'll learn about you can also use these tools to manage your data analysis, your data science projects, or even to manage your Excel files. So that's just a side note. This is a web dev course. Therefore we want to track our code changes over time).
- it's the idea to easily save different stages of your code without having to create side copies or without losing any prior progress.
GIT
= a free local tool, which you can download and install on your computer
- helps you to control the different versions that you have in your code for your web development projects organized in "repositories"

GITHUB
= a cloud hosting provider for Git repositories
- brings the projects we manage with Git to the cloud
- is perfect to collaborate in or contribute to web development projects
- is the world's largest development platform. Bringing Git's local repositories to the cloud.

102. Understanding the Git Basics
In a Git-managed project you have TWO SEPARATE AREASL:
1. One area, and that's the very important one for you as developer, is the so-called WORKING DIRECTORY. Your working directory is the CURRENT PROJECT FOLDER, meaning all the current folders and files you are actively working on. So basically, the code version you interact with at the moment, where you implement changes and so on.
2. The active tracking part, so this part where Git is able to save different code snapshots and to track these changes, doesn't take place in this working directory. This takes place in the so-called REPOSITORY. This repository is a hidden folder, actually a hidden area, which you cannot actively see. But in this repositories, we have ALL TRACKED FILES AND FOLDERS, meaning all files and folders Git manages for us -> if you add a specific file to this repository and therefore tell Git, "Hey, please track changes I made to this file", then Git doesn't save again and again copies of that file if you, well, create a new code version that you want to save. Git only stores the first version of this file, and then just tracks changes. So it compares the current state with the latest state, and then says, "Okay, this is what you've changed so I have to keep this in mind if you want to work on this latest code snapshot."
The idea of how Git manages all the tracked files and folders in this repositories, is based on the concept of commits. A COMMIT = a single code snapshot and branches. BRANCHES are where commits are stored, so to say. These snapshots are typically stored in the so-called MAIN/MASTER branch. That's so to say the core location, the core area where your main project is saved.
Assuming that you want to improve things on this master branch though, for example adding such an order button, then you could create a new branch, for example feature branch, which then holds this updated code snapshot. And once this feature is finally finished and checked for box and so on, then you could bring this feature also back to this master branch. => THIS IS HOW GIT WORKS IN A NUTSHELL

103. Initializing the Repository & Creating our First Commit
- git init -> initializing the project
- git status -> we see well information about our current git project (master branch, commits, untracked files)
- git merge feature -> referring to the branch that contains the commits that should be merged into our main branch